(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{471:function(e,t,r){"use strict";r.r(t);var a=r(2),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"ubuntu安装docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ubuntu安装docker"}},[e._v("#")]),e._v(" Ubuntu安装docker")]),e._v(" "),t("blockquote",[t("p",[e._v("注意：切勿在没有配置 Docker APT 源的情况下直接使用 apt 命令安装 docker-ce.")])]),e._v(" "),t("h1",{attrs:{id:"准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[e._v("#")]),e._v(" "),t("strong",[e._v("准备工作")])]),e._v(" "),t("h2",{attrs:{id:"系统要求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统要求"}},[e._v("#")]),e._v(" "),t("strong",[e._v("系统要求")])]),e._v(" "),t("p",[e._v("Docker CE 支持以下版本的 "),t("a",{attrs:{href:"https://ubuntu.com/server",target:"_blank",rel:"noopener noreferrer"}},[e._v("Ubuntu"),t("OutboundLink")],1),e._v(" 操作系统：")]),e._v(" "),t("ul",[t("li",[e._v("Eoan 19.10")]),e._v(" "),t("li",[e._v("Bionic 18.04 (LTS)")]),e._v(" "),t("li",[e._v("Xenial 16.04 (LTS)")])]),e._v(" "),t("p",[e._v("Docker CE 可以安装在 64 位的 x86 平台或 ARM 平台上。Ubuntu 发行版中，LTS（Long-Term-Support）长期支持版本，会获得 5 年的升级维护支持，这样的版本会更稳定，因此在生产环境中推荐使用 LTS 版本。")]),e._v(" "),t("h2",{attrs:{id:"卸载旧版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#卸载旧版本"}},[e._v("#")]),e._v(" "),t("strong",[e._v("卸载旧版本")])]),e._v(" "),t("p",[e._v("旧版本的 Docker 称为 "),t("code",[e._v("docker")]),e._v(" 或者 "),t("code",[e._v("docker-engine")]),e._v("，使用以下命令卸载旧版本：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo apt-get remove docker \\\n               docker-engine \\\n               docker.io\n")])])]),t("blockquote",[t("p",[e._v("docker-ce是docker团队认证，docker-ce团队维护的一个社区版发行包(docker-ee是企业版，目前在中国地区已嗝屁)；http://docker.io 是ubuntu团队（我不知道debian是不是也这样）维护的一个包。由于之前ubuntu团队有很长一段时间没有维护docker的版本，导致有一段时间http://docker.io的版本还停留在远古版本。后来ubuntu版本重新开始维护，版本继续迭代，截止2020-06-01日，版本已经更新到Docker version 19.03.6")])]),e._v(" "),t("h2",{attrs:{id:"新版的docker-io可在ubuntu上直接安装-推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新版的docker-io可在ubuntu上直接安装-推荐"}},[e._v("#")]),e._v(" "),t("strong",[e._v("新版的docker.io可在ubuntu上直接安装(推荐)")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo apt  install docker.io -y\n")])])]),t("p",[e._v("即装即用，如果是需要安装docker-ce小伙伴还请往下看")]),e._v(" "),t("h1",{attrs:{id:"使用-apt-安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-apt-安装"}},[e._v("#")]),e._v(" "),t("strong",[e._v("使用 APT 安装")])]),e._v(" "),t("p",[e._v("由于 "),t("code",[e._v("apt")]),e._v(" 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo apt-get update\n\n$ sudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    software-properties-common\n")])])]),t("p",[e._v("鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。")]),e._v(" "),t("p",[e._v("为了确认所下载软件包的合法性，需要添加软件源的 "),t("code",[e._v("GPG")]),e._v(" 密钥。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n\n\n# 官方源\n# $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n")])])]),t("p",[e._v("然后，我们需要向 "),t("code",[e._v("source.list")]),e._v(" 中添加 Docker 软件源")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('$ sudo add-apt-repository \\\n    "deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\\n    $(lsb_release -cs) \\\n    stable"\n\n\n# 官方源\n# $ sudo add-apt-repository \\\n#    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n#    $(lsb_release -cs) \\\n#    stable"\n')])])]),t("blockquote",[t("p",[e._v("以上命令会添加稳定版本的 Docker CE APT 镜像源，如果需要测试或每日构建版本的 Docker CE 请将 stable 改为 test 或者 nightly。")])]),e._v(" "),t("h2",{attrs:{id:"安装-docker-ce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker-ce"}},[e._v("#")]),e._v(" "),t("strong",[e._v("安装 Docker CE")])]),e._v(" "),t("p",[e._v("更新 apt 软件包缓存，并安装 "),t("code",[e._v("docker-ce")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo apt-get update\n\n$ sudo apt-get install docker-ce\n")])])]),t("h1",{attrs:{id:"使用脚本自动安装-可选"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用脚本自动安装-可选"}},[e._v("#")]),e._v(" "),t("strong",[e._v("使用脚本自动安装(可选)")])]),e._v(" "),t("p",[e._v("在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，Ubuntu 系统上可以使用这套脚本安装，另外可以通过 "),t("code",[e._v("--mirror")]),e._v(" 选项使用国内源进行安装：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ curl -fsSL get.docker.com -o get-docker.sh\n$ sudo sh get-docker.sh --mirror Aliyun\n# $ sudo sh get-docker.sh --mirror AzureChinaCloud\n")])])]),t("p",[e._v("执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的稳定(stable)版本安装在系统中。")]),e._v(" "),t("h1",{attrs:{id:"启动-docker-ce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动-docker-ce"}},[e._v("#")]),e._v(" "),t("strong",[e._v("启动 Docker CE")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo systemctl enable docker\n$ sudo systemctl start docker\n")])])]),t("h1",{attrs:{id:"建立-docker-用户组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建立-docker-用户组"}},[e._v("#")]),e._v(" "),t("strong",[e._v("建立 docker 用户组")])]),e._v(" "),t("p",[e._v("默认情况下，"),t("code",[e._v("docker")]),e._v(" 命令会使用 "),t("a",{attrs:{href:"https://en.wikipedia.org/wiki/Unix_domain_socket",target:"_blank",rel:"noopener noreferrer"}},[e._v("Unix socket"),t("OutboundLink")],1),e._v(" 与 Docker 引擎通讯。而只有 "),t("code",[e._v("root")]),e._v(" 用户和 "),t("code",[e._v("docker")]),e._v(" 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 "),t("code",[e._v("root")]),e._v(" 用户。因此，更好地做法是将需要使用 "),t("code",[e._v("docker")]),e._v(" 的用户加入 "),t("code",[e._v("docker")]),e._v(" 用户组。")]),e._v(" "),t("p",[e._v("建立 "),t("code",[e._v("docker")]),e._v(" 组：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo groupadd docker\n")])])]),t("p",[e._v("将当前用户加入 "),t("code",[e._v("docker")]),e._v(" 组：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ sudo usermod -aG docker $USER\n")])])]),t("p",[e._v("退出当前终端并重新登录，进行如下测试。")]),e._v(" "),t("h1",{attrs:{id:"测试-docker-是否安装正确"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#测试-docker-是否安装正确"}},[e._v("#")]),e._v(" "),t("strong",[e._v("测试 Docker 是否安装正确")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ docker run hello-world\n\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\nd1725b59e92d: Pull complete\nDigest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n")])])]),t("p",[e._v("若能正常输出以上信息，则说明安装成功。")]),e._v(" "),t("h1",{attrs:{id:"镜像加速"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像加速"}},[e._v("#")]),e._v(" "),t("strong",[e._v("镜像加速")])]),e._v(" "),t("p",[e._v("如果你出现上一步或者拉取镜像时发生一下错误，那么你一定是没有更改镜像源，docker默认的源为国外官方源，下载速度较慢")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker: Error response from daemon: Get https://registry-1.docker.io/v2/: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers).\nSee 'docker run --help'.\n")])])]),t("h3",{attrs:{id:"解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[e._v("#")]),e._v(" 解决方案")]),e._v(" "),t("p",[t("code",[e._v("sudo vim /etc/docker/daemon.json")]),e._v(" 这是docker默认的配置文件，有的话就修改没有的话就新建")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('mumu@ubuntu_01:/$ sudo vim /etc/docker/daemon.json \n{\n          "registry-mirrors": ["https://registry.docker-cn.com","http://hub-mirror.c.163.com"]\n}\n')])])]),t("p",[e._v("修改完成后保存退出 :wq")]),e._v(" "),t("p",[e._v("重启docker服务")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("sudo service docker restart\n")])])]),t("p",[e._v("现在你可以快乐的玩耍了^ ^")]),e._v(" "),t("h1",{attrs:{id:"感谢大佬"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#感谢大佬"}},[e._v("#")]),e._v(" "),t("strong",[e._v("感谢大佬")])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://yeasy.gitbook.io/docker_practice/install/ubuntu",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装docker详情"),t("OutboundLink")],1),e._v(" "),t("a",{attrs:{href:"https://yeasy.gitbook.io/docker_practice/install/mirror",target:"_blank",rel:"noopener noreferrer"}},[e._v("国内镜像加速"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);